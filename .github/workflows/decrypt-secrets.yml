name: Decrypt and Export Secrets

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  decrypt-and-export:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # ensure actions can read secrets
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install sops
        run: |
          set -euo pipefail
          echo "Installing sops..."
          SOPS_VERSION=v3.7.1
          curl -sL "https://github.com/mozilla/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux" -o sops
          chmod +x sops
          sudo mv sops /usr/local/bin/sops

      - name: Install Python deps
        run: |
          python3 -m pip install --user pyyaml
          export PATH="$HOME/.local/bin:$PATH"

      - name: Decrypt secrets (if present)
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          set -euo pipefail
          if [ ! -f secrets.enc.yaml ]; then
            echo "No encrypted secrets file (secrets.enc.yaml) found — skipping decrypt step."
            exit 0
          fi

          if [ -z "${SOPS_AGE_KEY:-}" ]; then
            echo "SOPS_AGE_KEY not provided — cannot decrypt secrets.enc.yaml"
            exit 1
          fi

          # Write AGE key to a temp file so sops can use it
          echo "$SOPS_AGE_KEY" > /tmp/sops-age.key
          export SOPS_AGE_KEY_FILE=/tmp/sops-age.key

          # Attempt decryption
          sops --decrypt --output secrets.yaml secrets.enc.yaml
          echo "Decrypted secrets.yaml written to workspace (only temporarily)."

      - name: Export selected secrets to environment
        if: success()
        run: |
          python3 - <<'PY'
import os, yaml
path = 'secrets.yaml'
if not os.path.exists(path):
    print('No secrets.yaml to export; exiting.')
    raise SystemExit(0)
with open(path) as f:
    data = yaml.safe_load(f)

def maybe(d,k):
    return d.get(k) if isinstance(d,dict) else None

exports = {
  'SENTRY_DSN': maybe(maybe(data,'sentry'),'dsn'),
  'SENTRY_SECURITY_TOKEN': maybe(maybe(data,'sentry'),'security_token'),
  'SHOPIFY_CLI_THEME_TOKEN': maybe(maybe(data,'shopify'),'cli_theme_token'),
  'GOOGLE_MAPS_API_KEY': maybe(maybe(data,'google'),'maps_api_key'),
  'SENTRY_AUTH_TOKEN': maybe(maybe(data,'ci'),'sentry_auth_token'),
}
envfile = os.environ.get('GITHUB_ENV')
with open(envfile,'a') as g:
    for k,v in exports.items():
        if v:
            g.write(f"{k}={v}\n")
            print(f"Exported {k}")
        else:
            print(f"Skipping empty {k}")
PY

      - name: Verify exported env
        run: |
          echo "SENTRY_DSN=${SENTRY_DSN:-<not-set>}"
          echo "SENTRY_SECURITY_TOKEN=${SENTRY_SECURITY_TOKEN:-<not-set>}"
