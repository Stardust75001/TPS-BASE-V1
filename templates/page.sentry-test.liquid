<!-- Test page pour v√©rifier l'int√©gration Sentry TPS BASE V1 -->
<div class="container my-5">
  <div class="row">
    <div class="col-12">
      <h1>üß™ Test Sentry - TPS BASE V1</h1>
      <p class="lead">Cette page permet de tester l'int√©gration Sentry dans votre th√®me Shopify.</p>

      <div class="alert alert-info">
        <strong>‚ÑπÔ∏è Information :</strong>
        <ul class="mb-0">
          <li>Sentry activ√© : <strong id="sentry-status">V√©rification...</strong></li>
          <li>DSN configur√© : <strong id="dsn-status">V√©rification...</strong></li>
          <li>Error Handler : <strong id="error-handler-status">V√©rification...</strong></li>
        </ul>
      </div>

      <div class="row mt-4">
        <div class="col-md-6">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">üß™ Tests Sentry</h5>
              <p class="card-text">Testez les diff√©rents types de capture d'erreurs.</p>

              <button class="btn btn-primary me-2 mb-2" onclick="testSentryMessage()">
                Test Message
              </button>

              <button class="btn btn-warning me-2 mb-2" onclick="testSentryError()">
                Test Erreur
              </button>

              <button class="btn btn-success me-2 mb-2" onclick="testTPSHandler()">
                Test TPS Handler
              </button>

              <button class="btn btn-info me-2 mb-2" onclick="testCartError()">
                Test Erreur Panier
              </button>
            </div>
          </div>
        </div>

        <div class="col-md-6">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">üìä Console</h5>
              <p class="card-text">Surveillez la console pour voir les logs.</p>
              <div
                id="console-output"
                style="height: 200px; overflow-y: auto; background: #f8f9fa; padding: 10px; border-radius: 4px; font-family: monospace; font-size: 12px;"
              >
                <div>üöÄ Pr√™t pour les tests...</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Fonction pour ajouter des logs √† la console visuelle
function addConsoleLog(message, type = 'info') {
  const output = document.getElementById('console-output');
  const timestamp = new Date().toLocaleTimeString();
  const icon = type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è';

  const logDiv = document.createElement('div');
  logDiv.innerHTML = `${timestamp} ${icon} ${message}`;
  output.appendChild(logDiv);
  output.scrollTop = output.scrollHeight;
}

// V√©rification du statut au chargement
document.addEventListener('DOMContentLoaded', function() {
  // V√©rifier Sentry
  const sentryStatus = document.getElementById('sentry-status');
  const dsnStatus = document.getElementById('dsn-status');
  const errorHandlerStatus = document.getElementById('error-handler-status');

  if (window.Sentry) {
    sentryStatus.textContent = '‚úÖ Activ√©';
    sentryStatus.className = 'text-success';
    addConsoleLog('Sentry SDK d√©tect√©', 'success');
  } else {
    sentryStatus.textContent = '‚ùå Non d√©tect√©';
    sentryStatus.className = 'text-danger';
    addConsoleLog('Sentry SDK non trouv√©', 'error');
  }

  // V√©rifier le DSN (on ne peut pas l'afficher pour des raisons de s√©curit√©)
  {% if settings.sentry_dsn %}
    dsnStatus.textContent = '‚úÖ Configur√©';
    dsnStatus.className = 'text-success';
    addConsoleLog('DSN configur√© dans les param√®tres', 'success');
  {% else %}
    dsnStatus.textContent = '‚ùå Non configur√©';
    dsnStatus.className = 'text-danger';
    addConsoleLog('DSN non configur√© dans les param√®tres', 'error');
  {% endif %}

  // V√©rifier le gestionnaire d'erreurs TPS
  if (window.TPSErrorHandler) {
    errorHandlerStatus.textContent = '‚úÖ Charg√©';
    errorHandlerStatus.className = 'text-success';
    addConsoleLog('TPS Error Handler charg√©', 'success');
  } else {
    errorHandlerStatus.textContent = '‚ùå Non charg√©';
    errorHandlerStatus.className = 'text-danger';
    addConsoleLog('TPS Error Handler non trouv√©', 'error');
  }

  // Auto-trigger tests when visiting the page with ?auto_sentry=1 or ?auto=1
  try {
    const params = new URLSearchParams(window.location.search);
    const auto = params.get('auto_sentry') === '1' || params.get('auto') === '1';
    if (auto) {
      addConsoleLog('Auto-trigger activ√© ‚Äî envoi des tests Sentry dans 1.5s', 'info');
      // delay a little to let the SDK initialize
      setTimeout(function() {
        if (window.Sentry) {
          testSentryMessage();
          setTimeout(testSentryError, 500);
        } else {
          addConsoleLog('Sentry non disponible ‚Äî impossible d\'envoyer les tests auto', 'error');
        }
      }, 1500);
    }
  } catch (e) {
    // ignore URL parsing errors
  }
});

// Tests Sentry
function testSentryMessage() {
  addConsoleLog('Test message Sentry...');
  if (window.Sentry) {
    Sentry.captureMessage('Test message depuis la page de test TPS BASE V1', 'info');
    addConsoleLog('Message envoy√© √† Sentry', 'success');
  } else {
    addConsoleLog('Sentry non disponible', 'error');
  }
}

function testSentryError() {
  addConsoleLog('Test erreur Sentry...');
  if (window.Sentry) {
    try {
      throw new Error('Test error depuis la page de test TPS BASE V1');
    } catch (error) {
      Sentry.captureException(error);
      addConsoleLog('Erreur envoy√©e √† Sentry', 'success');
    }
  } else {
    addConsoleLog('Sentry non disponible', 'error');
  }
}

function testTPSHandler() {
  addConsoleLog('Test TPS Error Handler...');
  if (window.TPSErrorHandler) {
    TPSErrorHandler.test();
    addConsoleLog('Test TPS Handler execut√©', 'success');
  } else {
    addConsoleLog('TPS Error Handler non disponible', 'error');
  }
}

function testCartError() {
  addConsoleLog('Test erreur panier simul√©e...');
  if (window.TPSErrorHandler) {
    const simulatedError = new Error('Erreur simul√©e lors de l\'ajout au panier');
    TPSErrorHandler.logCartError('add_to_cart', simulatedError, 12345);
    addConsoleLog('Erreur panier envoy√©e via TPS Handler', 'success');
  } else {
    addConsoleLog('TPS Error Handler non disponible', 'error');
  }
}
</script>
